---
# - name: Show Env variables
#   shell: |
#     env
- name: "install dependencies"
  become: true
  apt: 
    name: ["nodejs", "npm"]
    state: "latest"
    update_cache: yes
    
- name: Copy compiled files
  unarchive:
    # src: ./artifact.tar.gz√∑
    # src: /Users/nikhilb/udacity/cicd/cdond-c3-projectstarter/backend
    src: /home/circleci/project/artifact.tar.gz
    dest: /home/ubuntu/

- name: Stop and delete already running server
  ignore_errors: true
  shell: |
    pm2 kill

- name: Start server
  become: true
  shell: |
    cd /home/ubuntu/backend
    pm2 start npm --name backend -- start
    pm2 ls
  environment:
    ENVIRONMENT: production
    TYPEORM_CONNECTION: "postgres" 
    TYPEORM_ENTITIES: "./src/modules/domain/**/*.entity.ts"
    TYPEORM_HOST: database-1.cikwviu4ipxa.us-east-1.rds.amazonaws.com
    TYPEORM_PORT: "5432"
    TYPEORM_USERNAME: postgres
    TYPEORM_PASSWORD: 48T6V^ziBMQxhp8
    TYPEORM_DATABASE: postgres
    TYPEORM_MIGRATIONS: "./src/migrations/*.ts"
    TYPEORM_MIGRATIONS_DIR: "./src/migrations" 

# # - name: "show remote environment"
  # shell: env

# - name: install rsync on the ansible controller
#   connection: local
#   package:
#     name: rsync
#     state: present

# - name: "copy backend binaries"
#   become: true
#   synchronize:
#     src: ../../backend/dist
#     dest: /home/ubuntu/uda_app
#     recursive: true

# - name: "copy node_modules"
#   become: true
#   synchronize:
#     src: ../../backend/node_modules
#     dest: /home/ubuntu/uda_app
#     recursive: true

# - name: "delete anything that might already be running"
#   become: true
#   command: pm2 delete all
#   ignore_errors: true

# - name: "start server"
#   become: true
#   command: pm2 start -f ./main.js
#   args:
#     chdir: /home/ubuntu/uda_app/dist
#   environment:
#     ENVIRONMENT: production
#     TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION') }}"
#     TYPEORM_MIGRATIONS_DIR: "./migrations"
#     TYPEORM_MIGRATIONS: "./migrations/*.js"
#     TYPEORM_ENTITIES: "./modules/domain/**/*.entity.js"
#     TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST') }}"
#     TYPEORM_PORT: "{{ lookup('env', 'TYPEORM_PORT') }}"
#     TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME') }}"
#     TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD') }}"
#     TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE') }}"

