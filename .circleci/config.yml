version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy environment for backend cloudformation stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
      - run:
          name: Destroy environment for frontend cloudformation stack and s3
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-front-<< parameters.id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
              exit 1
            fi
            
jobs:
  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend/
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-builder]
      - run:
          name: Back-end build
          command: |
            cd backend/
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-builder

  test-frontend:
    executor: node
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - run:
          name: Testing frontend
          command: |
            cd frontend/
            npm run test
                
  test-backend:
    executor: node
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-builder]
      - run:
          name: Testing backend
          command: |
            cd backend/
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
            
  scan-frontend:
    executor: node
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scanning frontend
          command: |
            cd frontend/
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    executor: node
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-builder]
      - run:
          name: Scanning backend
          command: |
            cd backend/
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      # Checkout code from git
      # Restore from cache
      # Your job code here

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --region us-east-1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-front-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --region us-east-1
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            echo "[all]" > inventory
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:udapeople,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:udapeople,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> BACKENDIP
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["34:b8:83:88:95:73:32:a8:45:a2:fd:c0:2d:e5:95:a5"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory
            ansible-playbook -i inventory configure-server.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}   

  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [backend-builder]
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo apt-get dist-upgrade
            sudo ./aws/install
            sudo apt-get install libgnutls-openssl27
      - run:
          name: Run migrations
          command: |
            cd backend/
            npm run migrations > migration_status
            cat migration_status
      - run:
          name: Send migration results to rxdb
          command: |
            # Your code here
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful."
              curl --request PUT 'https://api.kvstore.io/collections/new_collection/items/my-key' \
                --header 'kvstoreio_api_key: 48a31fe381b91e3cc04eacfe2c36cc37c5c6de0fa665f912b88c4392dfcbffd4' \
                --header 'Content-Type: text/plain' \
                --data-raw 'success'
            elif grep -q "No migrations are pending" migration_status
            then
              echo "No DB migrations needed."
              curl --request PUT 'https://api.kvstore.io/collections/new_collection/items/my-key' \
                --header 'kvstoreio_api_key: 48a31fe381b91e3cc04eacfe2c36cc37c5c6de0fa665f912b88c4392dfcbffd4' \
                --header 'Content-Type: text/plain' \
                --data-raw 'no_migrations_run'
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl --request PUT 'https://api.kvstore.io/collections/new_collection/items/my-key' \
                --header 'kvstoreio_api_key: 48a31fe381b91e3cc04eacfe2c36cc37c5c6de0fa665f912b88c4392dfcbffd4' \
                --header 'Content-Type: text/plain' \
                --data-raw 'failure'
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:udapeople,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist   
      # - destroy-environment:
          # id: ${CIRCLE_WORKFLOW_ID:0:7}    
  
  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["34:b8:83:88:95:73:32:a8:45:a2:fd:c0:2d:e5:95:a5"]
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [backend-builder]
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory
            ansible-playbook -i inventory deploy-backend.yml -vv
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment:
          # id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            yum install -y tar gzip
            yum install curl
            # apk add --update curl 
            # pip install awscliv2
            # alias aws='awsv2'
            # aws --version
      - attach_workspace:
          at: .
      - run:
          name: Backend smoke test
          working_directory: ./backend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:udapeople,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            # BACKEND_IP=$(aws ec2 describe-instances \
            #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #   --filters "Name=tag:udapeople,Values=backend-eafbc73" \
            #   --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/index.html"
            # URL="http://udapeople-eafbc73.s3-website-us-east-1.amazonaws.com/index.html"
            if curl -s ${URL} | grep "Welcome"
            then
            # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment:
          # id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    executor: aws
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file cloudfront.yaml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # - destroy-environment:
          # id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  cleanup:
      executor: aws
      steps:
        # Checkout code from git
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi
            

workflows:
  default:
    jobs:
      # TODO - uncomment all
      - build-frontend
      - build-backend
      # - test-frontend:
          # requires: [build-frontend]
      # - test-backend:
          # requires: [build-backend]
      # - scan-backend:
          # requires: [build-backend]
      # - scan-frontend:
          # requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]